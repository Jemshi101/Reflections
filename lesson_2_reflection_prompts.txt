What happens when you initialize a repository? Why do you need to do it?

the initialisation process makes the git repository for the folder that we are in and creates a hidden folder named .git in the folder which contains the metadata for the git repository. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

working directory is the place where we do our experiments and check whether our code works or not. If we were able to get the code working we can add the corresponding files to the staging area, which acts as an intermediate stage between the repository, which is where we store the final codes per commit. we can add multiple files related to the logical change that we want to commit in the staging area before we make a commit.

How can you use the staging area to make sure you have one commit per logical
change?

by using staging area, we can make sure that all the files that have changes are included in the logical change are added for committing. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When we want to experiment a new feature, or make a new version, or develop in a new language or for a new language, branching would be really helpful. With branched we could keep track of all the changes we make in different branches.

How do the diagrams help you visualize the branch structure?

the diagrams show the exact structure of the repository with all the branches and the commits they have, giving us the ability to play around with the code.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

merging a branch into another makes the former branch merge into the latter and we can continue developing in the latter branch. This will make the changes made in the former branch, merge in to the latter branch.
The diagrams represent the branching and merging of the branches and its changes through commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic merging does the merging by analysing the code by itself while manual merging makes us to select or change the code required to be changed.
Former is faster and latter requires a supervision while merging because one must not loose the change made by the other while merging.
